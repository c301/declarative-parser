{"name":"Declarative-parser","tagline":"HTML parser configured via JSON","body":"Should be mentioned later:\r\npreBuildResults\r\ndefaultConfig\r\ndefaultvalue\r\naddFieldDecorator\r\n\r\n\r\nParser Initialization\r\n=====================\r\nCommon workflow\r\n```\r\nnew Parser().parse( config, function( result ){\r\n    console.log( result )\r\n} )\r\n```\r\nPass custom document object\r\n```\r\nnew Parser( HTMLDoc ).parse( config,  function( result ){\r\n    console.log( result )\r\n} )\r\n```\r\nPass html string\r\n```\r\nnew Parser( '<div class=\"item\">21</div>' ).parse( config, function( result ){\r\n    console.log( result )\r\n} )\r\n```\r\nPass config\r\n```\r\nvar parserConfig = {\r\n    document: document,\r\n\r\n    //hooks. All hooks should return something to rewrite default behavior\r\n    beforeParse: function( parseConfig ){  },\r\n    afterParse: function( parseResult ){  },\r\n    beforeParseValue: function( valueConfig ){  },\r\n    afterParseValue: function( valueConfig, result ){  },\r\n    onGetValue: function( valueName ){  },\r\n\r\n    operations: {},\r\n    decorators: {}\r\n}\r\nnew Parser( parserConfig ).parse( config ).then( function( result ){\r\n    console.log( result )\r\n} )\r\n```\r\nParser Config\r\n=============\r\n- \"debug\" - if positive, output debug information to console\r\n- \"prompt\" - JS function to ask for user input ( native `window.prompt` used by default). Return `null` to break parsing\r\n\r\nGeneral attributes of the operations:\r\n-------------------------------------\r\n- \"final\" - defines whether or not the operation. If previos result not empty, operation do not executes\r\n- \"glue\" - to make result.join( glue ) if result is array. Ignored if result is string\r\n- \"preffix\" - add preffix string to result, only if typeof result is string\r\n- \"suffix\" - add suffix string to result, only if typeof result is string\r\n- \"num_in_array\" - index in array that should return( if exist ). \"glue\" has more priority than \"num_in_array\"\r\n- \"debug\" - print result in console if debug is on\r\n- \"normalize_space\" - normalize space\r\n- \"persist\" - use cache or not ( \"persist\" : true )\r\n- \"required\" - if not defined user have to manually set value for this\r\n- \"label\" - label for value ( using in prompt for 'required' )\r\n- \"prompt_text\" - text for prompt ( using in prompt for 'required' )\r\n- \"site_specific_config\" - operations for specifis site `{\"craigslist\": [{ \"type\": \"manual\",  \"value\": \"Y\" }],\"kijiji\": [{ \"type\": \"manual\",  \"value\": \"1\" }]}`\r\n\r\nExample\r\n-------\r\n+ operation with few general attributes. \r\n + First operation: try to find array of elements with xpath, then join it with glue. Add suffix and preffix.\r\n + Second operation in queue will not executes if first operation was successed ( \"final\" : true ).\r\n \r\n```\r\n{   \"name\" : \"phone\",\r\n    \"operations\" : [\r\n        { \r\n            \"xpath\" : \".//div[@class='content']/div[@id='contact_info']/p\",\r\n            \"prefix\" : \"Contact phone \",\r\n            \"suffix\" : \" please call on monday.\"\r\n            \"glue\" : \"-\",\r\n        },\r\n        { \r\n            \"xpath\" : \".//div[@class='content']/div[@id='contact']/div\",\r\n            \"num_in_array\" : 2,\r\n            \"final\" : true\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nTypes of the operations\r\n=======================\r\n\r\n+ \"manual\" - manual set value of field. Short form: `{ \"name\": \"building_sqft\", \"value\" : \"\" }` or inside queue `{  \"type\": \"manual\",  \"value\": \"1\"    }` or short form inside queue `[\"Y\"]` ( just string )\r\n+ \"regex\" - return 1st, not 0, element of the matches, so regex should contains \"()\". Normal form: `{ \"type\": \"regex\", \"regex\": \"^(\\d{3})\" }` or short form `{ \"regex\": \"\\d(.+?)\\d\" }`, \"pipe\" - return source string instead of empty string if regex is failed, \"full\": return full array of RegExp.exec() results, we can use `num_in_array` to get specific result: `{ \"regex\": \"\\\\d(.+?)(\\\\d+)\", \"num_in_array\": 2 }`, \"match\": use `string.match(regexp)` instead of `regexp.exec(string)`. By default used 'i' modifier (case insensitive), to change this, we can use `\"modifier\": \"\" ` option\r\n+ \"parsed_val\" - use another value as result. Normal form: `{ \"type\": \"parsed_val\",  \"name\": \"address\" }` or short form `{ \"valName\": \"address\" }`. All `\\` should be escaped.\r\n+ \"xpath\" - make a xpath search. Normal form: `{ \"type\": \"xpath\",  \"xpath\": \".//div[1]\" }` or short form `{ \"xpath\": \".//div[1]\" }`. Statement `{:index:}` will be replaced by corresponding index of syndication button. Exapmple: user press button#2 ( with index 2 ), `xpath: \".//div[{:index:}]/span\"` will become `\".//div[2]/span\"`. \"document_url\" - sets contentDocument from remote url. \"doc\" - set contentDocument for xpath\r\n+ \"current_document\" - return current contentDocument. Normal form: `{ \"type\": \"current_document\" }`\r\n+ \"get_attribute\" - get attribute of value. Normal form: `{ \"type\": \"get_attribute\",  \"attribute\": \"href\" }` or short form `{ \"attribute\": \"location\" }`\r\n+ \"html_template\" - prepare html template. Normal form: `{ \"type\": \"html_template\",  \"teplate\": \"<div>{:price:}</div>\" }` or short form `{ \"template\": \"<div>{:price:}</div>\" }`\r\n+ \"replace\" - `{ \"type\": \"replace\", \"suffix\": \"\\n\\u200C\\n\", \"is_regex\" : true, \"arg1\": \"\\\\s.?-\\\\s?\", \"arg2\": \"\\n\"}`, if `is_regex`: use regex with 'global' modificator\r\n+ \"equal\" - return bool result `{\"type\": \"equal\", \"value\": \"0\", \"is_regex\" : true}`\r\n+ \"switchOf\" - \"value\" - value that will be used in \"flag\"; \"flag\" - OperarionsQueue its result will interpreted as bool; \"positive\"/\"negative\" - OperarionsQueue that should be executed according to \"flag\" result. `{\"type\": \"switchOf\", \"value\": {\"valName\": \"bedeoom_count\"}, \"flag\": {\"type\": \"equal\", \"value\": \"true\"}, \"positive\": \"Y\", \"negative\": \"N\"}` \r\n+ \"wait\" - wait a delay `{ \"type\": \"wait\", \"delay\": 1000, \"postProcessing\": [{\"xpath\": \".//div[@id='results']//div[contains(@class,'grid_2 omega end')]\"} ] }`\r\n+ \"js_eval\" - execute js code`{ \"type\": \"js_eval\", \"js\": \"(function(){ return \"{:bedroom_count:} bedrooms\" })()\" }`\r\n+ \"html_to_text\" - stripe html string to get good formatter text string\r\n+ \"html_decode\" - decode html entities\r\n+ \"utf_encode\" - encode utf entities like: `&#x2730;` into symbols, ie `âœ°` in given text\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}